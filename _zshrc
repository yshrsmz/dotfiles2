export LANG=ja_JP.UTF-8

# prioritize homebrew
export PATH=/usr/local/bin:$PATH

export GRADLE_HOME=$(brew --prefix)/Cellar/gradle/2.2.1
export GOPATH=~/go

export GROOVY_HOME=/usr/local/opt/groovy/libexec
export GRIFFON_HOME=/usr/local/Cellar/griffon/1.5.0/libexec

export ANDROID_HOME=~/android-sdk

export PATH=$(brew --prefix)/bin:$PATH
export PATH=~/bin:$PATH:
export PATH=$ANDROID_HOME/platform-tools:$ANDROID_HOME/tools:$PATH
export PATH=$(brew --prefix)/mysql/bin:$PATH
export PATH=~/.cabal/bin:$PATH
export PATH=$(brew --prefix)/share/npm/bin:$PATH
export PATH=$GRADLE_HOME/bin:$PATH
export PATH=$(brew --prefix)/opt/go/libexec/bin:$PATH
export PATH=$GOPATH/bin:$PATH
export PATH=$HOME/.rbenv/shims:$PATH
export PATH=$HOME/dotfiles/apktool:$PATH

export PATH=/usr/local/bin:$PATH

export EDITOR=/usr/bin/vim
export SHELL=$(brew --prefix)/bin/zsh
export ANT_OPTS=-Dfile.encoding=UTF8

# Packer PATH
export PATH=~/packer:$PATH

# load OS specific settings
[ -f $ZDOTDIR/.zshrc.`uname` ] && source $ZDOTDIR/.zshrc.`uname`

## alias
alias ls='ls -AFG'
alias ll='ls -lFG'
alias la='ls -lAFG'
alias df='df -h'
alias du='du -h'
alias oppai='git'
alias tmux='tmux -2'
alias tmux-copy='tmux save-buffer - | pbcopy'

#lsに色付け
export LSCOLORS=gxfxcxdxbxegedabagacad

## not distinguish between lower case and upper case
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'
zstyle ':completion:*' menu select=1

# chpwd settings
# via: http://qiita.com/yuyuchu3333/items/b10542db482c3ac8b059
#
chpwd() {
    ls_abbrev
}
ls_abbrev() {
    if [[ ! -r $PWD ]]; then
        return
    fi
    # -a : Do not ignore entries starting with ..
    # -C : Force multi-column output.
    # -F : Append indicator (one of */=>@|) to entries.
    local cmd_ls='ls'
    local -a opt_ls
    opt_ls=('-aCF' '--color=always')
    case "${OSTYPE}" in
        freebsd*|darwin*)
            if type gls > /dev/null 2>&1; then
                cmd_ls='gls'
            else
                # -G : Enable colorized output.
                opt_ls=('-aCFG')
            fi
            ;;
    esac

    local ls_result
    ls_result=$(CLICOLOR_FORCE=1 COLUMNS=$COLUMNS command $cmd_ls ${opt_ls[@]} | sed $'/^\e\[[0-9;]*m$/d')

    local ls_lines=$(echo "$ls_result" | wc -l | tr -d ' ')

    if [ $ls_lines -gt 10 ]; then
        echo "$ls_result" | head -n 5
        echo '...'
        echo "$ls_result" | tail -n 5
        echo "$(command ls -1 -A | wc -l | tr -d ' ') files exist"
    else
        echo "$ls_result"
    fi
}

#press enter then ls & git status
#http://qiita.com/yuyuchu3333/items/e9af05670c95e2cc5b4d
#
function do_enter() {
    if [ -n "$BUFFER" ]; then
        zle accept-line
        return 0
    fi
    echo
    ls
    # ↓おすすめ
    # ls_abbrev
    if [ "$(git rev-parse --is-inside-work-tree 2> /dev/null)" = 'true' ]; then
        echo
        echo -e "\e[0;33m--- git status ---\e[0m"
        git status -sb
    fi
    zle reset-prompt
    return 0
}
zle -N do_enter
bindkey '^m' do_enter


### 一発でAndroidアプリをリバースエンジニアリングする
# http://qiita.com/GeneralD/items/a4af8d1ac2b13a8c0bc8
# Decompile Java classes recursiely keeping hierarchy
jadr() {
    jad -8 -s java -d $2 -r $1/**/*.class
}

# Decompile Android application
deapk() {
    local dst=${${1##*/}%%.*}
    dst+='.depackaged'
    unzip $1 -d $dst
    dex2jar ${dst}/classes.dex
    unzip ${dst}/classes_dex2jar.jar -d ${dst}/Classes
    jadr ${dst} ${dst}/src
}

### peco settings ------------
# filter zsh history
function peco-select-history () {
    local tac
    if which tac > /dev/null; then
        tac="tac"
    else
        tac="tail -r"
    fi
    BUFFER=$(history -n 1 | \
        eval $tac | \
        peco --query "$LBUFFER")
    CURSOR=$#BUFFER
    zle clear-screen
}
zle -N peco-select-history
bindkey '^r' peco-select-history

# filter and kill process
function peco-proc () {
    ps -ef | peco | awk '{ print $2 }' | xargs kill
    #ps ax -o pid,lstart,command | peco --query "$LBUFFER" | awk '${print $1}' | xargs kill
    zle clear-screen
}
zle -N peco-proc
bindkey '^x^p' peco-proc

## options
setopt BASH_AUTO_LIST
setopt LIST_AMBIGUOUS
setopt AUTO_PUSHD

## history
HISTFILE="$HOME/.zsh/history"
HISTSIZE=1000000
SAVEHIST=1000000
setopt hist_ignore_all_dups
setopt hist_reduce_blanks
setopt share_history
autoload history-search-end
zle -N history-beginning-search-backward-end history-search-end
zle -N history-beginning-search-forward-end history-search-end
bindkey "^p" history-beginning-search-backward-end
bindkey "^n" history-beginning-search-forward-end


## rbenv setting
if which rbenv > /dev/null; then eval "$(rbenv init -)"; fi

## z.sh setting
. `brew --prefix`/etc/profile.d/z.sh

autoload -U compinit && compinit

## git completion
fpath=($(brew --prefix)/share/zsh/site-functions/ $fpath)

if which compdef > /dev/null 2>&1; then
    if which hub > /dev/null 2>&1; then
        compdef hub=git
    fi
fi


## powerline config
powerline-daemon -q
. `brew --prefix`/lib/python2.7/site-packages/powerline/bindings/zsh/powerline.zsh
