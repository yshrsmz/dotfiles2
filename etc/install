#!/bin/sh
# This shell script conforms to POSIX.

# An interrupt (typically ^C) has the effect of aborting the current command
trap 'e_error "Abort the command that is in progress"; exit 1' INT
trap 'e_error "Some error has occurred"; exit 1' ERR
#set -e
set -u

# Pilot of dotfiles
# It shows the use of dotfiles and describe what is inside
# regardless of execution or non-execution
#
cat <<-'EOT'

    | |     | |  / _(_) |
  __| | ___ | |_| |_ _| | ___  ___
 / _` |/ _ \| __|  _| | |/ _ \/ __|
| (_| | (_) | |_| | | | |  __/\__ \
 \__,_|\___/ \__|_| |_|_|\___||___/

*** WHAT'S INSIDE? ***
  1. Download https://github.com/yshrsmz/dotfiles2.git
  2. Symlinking dot files to your home directory
  3. Execute all sh files within 'etc/init/` (optional)

See the README for documentation.
https://github.com/yshrsmz/dotfiles2

Copyright (c) 2014 "Yasuhiro Shimizu" aka @yshrsmz
Licensed under the MIT license.

EOT

# Insert newline
e_newline() { printf "\n"; }
# Normal style of writing
#e_header()  { printf "\n\033[1m%s\033[0m\n" "$*"; }
e_header()  { printf "\033[1m%s\033[0m\n" "$*"; }
# Success
e_success() { printf " \033[1;32m✔\033[0m  %s\n" "$*"; }
# Failure
e_error()   { printf " \033[1;31m✖\033[0m  %s\n" "$*" 1>&2; }
# Result
e_arrow()   { printf " \033[1;34m➜\033[0m  %s\n" "$*"; }
# Check if exists
#is_exist()  { which "$1" >/dev/null 2>&1; return $?; }
is_exist()  { [ -x "$(which "$1")" ]; }

# Set dotfiles environment valuable
DOTFILES=~/.dotfiles; export DOTFILES

# This is a make install, which is functionize
# To execute all sh files within etc/init/.
# Also, this initialize function has interactive system and works as a selector
initialize()
{
    prompt_menu() {
        local prompt nums
        e_header "Run the following init scripts."
        if _prompt_menu_draws "To edit this list, press any key except ENTER. " -1 && read -rp "Enter to Go> " && [ -n "$REPLY" ]; then
            prompt="Press number to toggle, r/R to reverse (Separate options with spaces): "
            while _prompt_menu_draws "$1" 1 && read -rp "$prompt" nums && [ "$nums" != '' ]; do
                _prompt_menu_adds "$nums"
            done
        fi
        _prompt_menu_adds
    }

    _prompt_menu_iter() {
        local fn i sel state c=0
        local fn=$1; shift
        for i in $menu_options; do
            state=0
            for sel in $menu_selects; do
                [ "$sel" = "$i" ] && state=1 && break
            done
            $fn $state "$c" "$i" "$@"
            c=$((c+1))
        done
    }

    _prompt_menu_draws() {
        # carriage return printf
        printf "\r\033[1m%s\033[0m\n" "$1"
        _prompt_menu_iter _prompt_menu_draw "$2"
    }

    _prompt_menu_draw()
    {
        local method
        document() { toupper | sed 's/\.sh//g' | sed 's/_/ /g'; }
        if [ "$1" -eq 0 ]; then method=e_error; fi
        if [ "$1" -eq 1 ]; then method=e_success; fi

        if [ -n "$4" ]; then
            if [ "$4" = '-1' ]; then
                e_arrow "$(printf "%2d) %s\n" $(($2+1)) "$(basename "$3" | document)")"
            else
                $method "$(printf "%2d) %s\n" $(($2+1)) "$(basename "$3" | document)")"
            fi
        else
            $method "$(basename "$2" | document)"
        fi
    }

    _prompt_menu_adds() {
        _prompt_menu_result=""
        _prompt_menu_iter _prompt_menu_add "$@"
        menu_selects="${_prompt_menu_result}"
    }

    _prompt_menu_add() {
        local state c file nums n keep match
        state=$1; shift
        c=$1; shift
        file=$1; shift
        IFS=' '
        nums="$*"
        for n in $nums; do
            if [ "$n" = 'r' -o "$n" = 'R' ]; then
                match=1; [ "$state" = 0 ] && keep=1
            elif expr "$n" : "^[0-9][0-9]*$" >/dev/null && [ $((n-1)) = "$c" ]; then
                match=1; [ "$state" = 0 ] && keep=1
            fi
        done
        [ ! "$match" -a "$state" = 1 -o "$keep" ] || return
        _prompt_menu_result="$_prompt_menu_result $file"
    }

    # Capitalization based on the POSIX standards
    toupper() { awk '{ print toupper(substr($0, 1, 1)) substr($0, 2, length($0) - 1) }'; }
    tolower() { awk '{ print tolower(substr($0, 1, 1)) substr($0, 2, length($0) - 1) }'; }

    # main function in initialize
    init_files() {
        local f files i
        f=""
        files=$(echo $DOTFILES/etc/init/*.sh $DOTFILES/etc/init/osx/*.sh)
        for i in $files
        do
            f="$f $(DEBUG=1 bash "$i")"
        done

        menu_options=""
        menu_selects=""
        for i in $f
        do
            menu_selects="$menu_selects $i"
            menu_options="$menu_options $i"
        done

        [ -n "$f" ] && prompt_menu "Press ENTER to run checked files"
        for i in $menu_selects
        do
            bash "$i"
        done
    }
    init_files "$@"
}

installing_dotfiles()
{
    # If $DOTFILES already exists, removing the directory
    if [ -d $DOTFILES ]; then
        e_header "$DOTFILES: already exists, removing..."
        rm -rf "$DOTFILES"
        #mv -f $DOTFILES ${DOTFILES}.old
    fi

    # 1. Download the repository
    # ==> downloading
    # Priority: git > curl > wget
    e_newline
    e_header 'Downloading dotfiles...'
    if is_exist 'git'; then
        # --recursive equals to ...
        # git submodule init
        # git submodule update
        git clone --recursive https://github.com/yshrsmz/dotfiles2.git "$DOTFILES"

    else
        local zip_url='https://github.com/yshrsmz/dotfiles2/archive/master.zip'

        # Ensure the workplace
        mkdir -p /tmp/$$ && cd /tmp/$$

        if is_exist 'curl'; then
            curl -L -o dotfiles.zip "$zip_url"
        elif is_exist 'wget'; then
            wget -O dotfiles.zip "$zip_url"
        else
            e_error 'git,curl,wget: not found'
            return 1
        fi

        # Expand the zip to dotfiles directory
        # and move to $DOTFILES
        unzip dotfiles.zip
        mv dotfiles-master "$DOTFILES"
    fi && e_success 'done'

    # 2. Deploy dotfiles to your home directory
    # ==> deploying
    cd "$DOTFILES"
    e_newline
    e_header 'Deploying dotfiles...'
    if make deploy; then
        e_success 'done'
    fi

    # 3. Execute all sh files within etc/init/
    # ==> initializing
    if [ "${1:-}" = 'init' ]; then
        e_header 'Initializing...'
        if [ -t 0 ]; then
            initialize "$@"
        else
            cd "$DOTFILES"
            make init
        fi && e_success 'done'
    fi

    e_newline
    if [ -t 0 ]; then
        # Restart shell if specified "bash -c $(curl -L {URL})"
        # not restart:
        #   curl -L {URL} | bash
        e_arrow 'Restarting your shell...'
        exec "${SHELL:-/bin/zsh}"
    else
        e_arrow 'Restart your shell, manually'
    fi
}

# Main
#
# Check if run from a command line only bash
# python-like "if __name__ == '__main__':"
#
# A SAFETY system
# Note: This script is designed to be run from a command line shell.
if [ "$0" = "${BASH_SOURCE:-}" ]; then
    e_error 'WARNING!!'
    e_error 'You should NOT run directly from the command line'
    e_error 'For more info, see https://github.com/yshrsmz/dotfiles2'
    e_newline

    # Push off the safety catch
    if [ "${1:-}" != 'directly' ]; then
        exit 1
    fi
fi

installing_dotfiles "$@"
e_success 'All done'

# vim:fdm=marker
